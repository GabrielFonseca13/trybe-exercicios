function createDaysOfTheWeek() {
  const weekDays = [
    "Domingo",
    "Segunda",
    "Ter√ßa",
    "Quarta",
    "Quinta",
    "Sexta",
    "S√°bado",
  ];
  const weekDaysList = document.querySelector(".week-days");

  for (let index = 0; index < weekDays.length; index += 1) {
    const days = weekDays[index];
    const dayListItem = document.createElement("li");
    dayListItem.innerHTML = days;

    weekDaysList.appendChild(dayListItem);
  }
}

createDaysOfTheWeek();

// Escreva seu c√≥digo abaixo.

//   Exerc√≠cio 1:
// Crie um calend√°rio dinamicamente.
// O array decemberDaysList cont√©m os dois √∫ltimos dias de novembro e os dias do m√™s de dezembro. Sua fun√ß√£o deve criar dinamicamente cada dia do calend√°rio e os adicionar dentro da tag <ul>.
// Note que os dias 29 e 30 de novembro est√£o no array, pois representam respectivamente Domingo e Segunda-feira.
// A tag <ul> deve conter o id 'days';
// Os dias devem estar contidos em uma tag <li>, e todos devem ter a classe day. Ex: <li class="day">3</li>
// Os dias 24, 25 e 31 s√£o feriados e, al√©m da classe day, devem conter tamb√©m a classe holiday. Ex: <li class="day holiday">24</li>
// Os dias 4, 11, 18 e 25 s√£o sextas-feiras. Eles devem conter a classe day e a classe friday. Ex: <li class="day friday">4</li>

let decemberDaysList = [
  29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
  21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
];

function createDaysOfTheMonth() {
  let getDaysList = document.querySelector("#days");

  for (let index = 0; index < decemberDaysList.length; index += 1) {
    let day = decemberDaysList[index];
    let dayItem = document.createElement("li");
    dayItem.innerHTML = day;

    if (day === 24 || day === 31) {
      dayItem.className = "day holiday";
      getDaysList.appendChild(dayItem);
    } else if (day === 4 || day === 11 || day === 18) {
      dayItem.className = "day friday";
      getDaysList.appendChild(dayItem);
    } else if (day === 25) {
      dayItem.classList = "day holiday friday";
      getDaysList.appendChild(dayItem);
    } else {
      dayItem.className = "day";
      getDaysList.appendChild(dayItem);
    }
  }
}
createDaysOfTheMonth();

//     üöÄ Exerc√≠cio 2:
// Implemente uma fun√ß√£o que crie dinamicamente um bot√£o com o nome "Feriados".
// Sua fun√ß√£o deve receber um par√¢metro com a string 'Feriados'
// Adicione a este bot√£o a ID "btn-holiday"
// Adicione este bot√£o como filho/filha da tag <div> com classe "buttons-container"

const btnContainner = document.querySelector(".buttons-container");

function createHolidayButton(buttonName) {
  let newButton = document.createElement("button");
  newButton.id = "btn-holiday";

  newButton.innerHTML = buttonName;

  btnContainner.appendChild(newButton);
}

createHolidayButton("Feriados");

// üöÄ Exerc√≠cio 3:
// Implemente uma fun√ß√£o que muda a cor de fundo dos dias que possuem a classe "holiday".
// Adicione ao bot√£o "Feriados" um evento de "click" que altere a cor de fundo dos dias que possuem a classe "holiday"
// üëÄ √â interessante que esse bot√£o possua tamb√©m a l√≥gica inversa. Ao ser clicado novamente, ele retorna √† configura√ß√£o inicial com a cor "rgb(238,238,238)".

function displayHolidays() {
  let getHolidayButton = document.querySelector('#btn-holiday');
  let getHolidays = document.querySelectorAll('.holiday')
  let backgroundColor = 'rgb(238,238,238)';
  let setNewColor = 'white';

  getHolidayButton.addEventListener('click', function() {
    for (let index = 0; index < getHolidays.length; index += 1) {
      if (getHolidays[index].style.backgroundColor === setNewColor) {
        getHolidays[index].style.backgroundColor = backgroundColor;
      } else {
        getHolidays[index].style.backgroundColor = setNewColor;
      }
    }
  });
}

displayHolidays();
// function changeBackGroundHolidays() {

//   for (let index = 0; index < getHolidays.length; index +=1){
//     getHolidays[index].style.backgroundcolor = 'green';
//   }
// }
// changeBackGroundHolidays();

// üöÄ Exerc√≠cio 4:
// Implemente uma fun√ß√£o que crie dinamicamente um bot√£o com o nome "Sexta-feira". Sua fun√ß√£o deve receber como par√¢metro a string "Sexta-feira".
// Adicione a esse bot√£o o ID "btn-friday";
// Adicione esse bot√£o como filho/filha da tag <div> com classe "buttons-container".

// üöÄ Exerc√≠cio 5:
// Implemente uma fun√ß√£o que modifica o texto exibido nos dias que s√£o Sexta-feira. Adicione ao bot√£o "Sexta-feira" um evento de "click" e modifique o texto a ser exibido nos dias que s√£o sextas-feiras.
// üëÄ √â interessante que esse bot√£o possua tamb√©m a l√≥gica inversa. Ao ser clicado novamente, ele retorna √† configura√ß√£o inicial exibindo os dias.

// üöÄ Exerc√≠cio 6:
// Implemente duas fun√ß√µes que criem um efeito de "zoom". Ao passar o ponteiro do mouse em um dia do m√™s no calend√°rio, o texto desse dia deve aumentar e, quando o ponteiro do mouse sair do dia, o texto deve retornar ao tamanho original.
// Dica - Propriedade: event.target.

// üöÄ Exerc√≠cio 7:
// Implemente uma fun√ß√£o que adicione uma tarefa personalizada ao calend√°rio. A fun√ß√£o deve receber como par√¢metro a string com o nome da tarefa (ex: "cozinhar") e criar dinamicamente um elemento com a tag <span> contendo a tarefa.
// O elemento criado dever√° ser adicionado como filho/filha da tag <div> que possui a classe "my-tasks".

// üöÄ Exerc√≠cio 8:
// Implemente uma fun√ß√£o que adicione uma legenda com cor para a tarefa.
// Copiar
// * Essa fun√ß√£o dever√° receber como par√¢metro uma string ('cor') e criar dinamicamente um elemento de tag `<div>` com a classe `task`.
// O par√¢metro cor dever√° ser utilizado como cor de fundo da <div> criada.
// O elemento criado dever√° ser adicionado como filho/filha da tag <div> que possui a classe "my-tasks".

// üöÄ Exerc√≠cio 9:
// Implemente uma fun√ß√£o que selecione uma tarefa.
// Adicione um evento que ao clicar no elemento com a tag <div> referente √† cor da sua tarefa, atribua a esse elemento a classe task selected, ou seja, quando sua tarefa possuir a classe task selected ela estar√° selecionada.
// Ao clicar novamente no elemento, a sua classe dever√° voltar a ser somente task, ou seja, essa tarefa est√° deixando de ser uma tarefa selecionada.

// üöÄ Exerc√≠cio 10:
// Implemente uma fun√ß√£o que atribua a cor da tarefa ao dia do calend√°rio.
// Adicione um evento que, ao clicar em um dia do m√™s no calend√°rio, atribua a esse dia a cor da legenda da sua tarefa selecionada.
// Ao clicar novamente no dia com a cor da legenda, a sua cor dever√° voltar √† configura√ß√£o inicial rgb(119,119,119)

// üöÄ B√¥nus:
// Vamos adicionar compromissos ao seu calend√°rio? Implemente uma fun√ß√£o que, ao digitar um compromisso na caixa de texto "COMPROMISSOS", adiciona o item √† lista "MEUS COMPROMISSOS" ao clicar no bot√£o "ADICIONAR".
// Se nenhum caractere for inserido no campo input, a fun√ß√£o deve retornar um alert com uma mensagem de erro ao clicar em "ADICIONAR".
// Ao pressionar a tecla "enter" o evento tamb√©m dever√° ser disparado.
// Dica - Propriedade: key.
